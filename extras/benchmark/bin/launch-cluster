#!/usr/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -x
# Launch EC2 cluster, we always have one master, to at least run ganglia and a number of nodes.

if [ -z $1 ]; then
  echo "Cluster name required!"
  exit -1
fi

if [ -z $2 ]; then
  echo "Must specify the number of nodes to start."
  exit -1
fi

CLUSTER=$1
NO_INSTANCES=$2

# Import variables
bin=`dirname "$0"`
bin=`cd "$bin"; pwd`
. "$bin"/benchmark-ec2-env.sh


if [ -z $AWS_ACCOUNT_ID ]; then
  echo "Please set AWS_ACCOUNT_ID in $bin/benchmark-ec2-env.sh."
  exit -1
fi


# Starting the master

if [ -z $AWS_ACCOUNT_ID ]; then
  echo "Please set AWS_ACCOUNT_ID in $bin/benchmark-ec2-env.sh."
  exit -1
fi

echo "Testing for existing master in group: $CLUSTER"
MASTER_EC2_HOST=`ec2-describe-instances | awk '"RESERVATION" == $1 && "'$CLUSTER_MASTER'" == $4, "RESERVATION" == $1 && "'$CLUSTER_MASTER'" != $4'`
MASTER_EC2_HOST=`echo "$MASTER_EC2_HOST" | awk '"INSTANCE" == $1 && "running" == $6 {print $4}'`

if [ ! -z "$MASTER_EC2_HOST" ]; then
  echo "Master already running on: $MASTER_EC2_HOST"
  MASTER_HOST=`ec2-describe-instances $INSTANCE | grep INSTANCE | grep running | grep $MASTER_EC2_HOST | awk '{print $5}'`
  exit 0
fi

ec2-describe-group | egrep "[[:space:]]$CLUSTER_MASTER[[:space:]]" > /dev/null
if [ ! $? -eq 0 ]; then
  echo "Creating group $CLUSTER_MASTER"
  ec2-add-group $CLUSTER_MASTER -d "Group for Benchmark Master."  > /dev/null
  ec2-authorize $CLUSTER_MASTER -o $CLUSTER_MASTER -u $AWS_ACCOUNT_ID  > /dev/null
  ec2-authorize $CLUSTER_MASTER -p 22    > /dev/null  # ssh
fi

ec2-describe-group | egrep "[[:space:]]$CLUSTER[[:space:]]" > /dev/null
if [ ! $? -eq 0 ]; then
  echo "Creating group $CLUSTER"
  ec2-add-group $CLUSTER -d "Group for Benchmark Nodes."  > /dev/null
  ec2-authorize $CLUSTER -o $CLUSTER -u $AWS_ACCOUNT_ID  > /dev/null
  ec2-authorize $CLUSTER -p 22  > /dev/null   # ssh
  
  ec2-authorize $CLUSTER_MASTER -o $CLUSTER -u $AWS_ACCOUNT_ID > /dev/null
  ec2-authorize $CLUSTER -o $CLUSTER_MASTER -u $AWS_ACCOUNT_ID > /dev/null
fi

# Start a master
echo "Starting master with AMI $AMI_IMAGE"
INSTANCE=`ec2-run-instances $AMI_IMAGE -n 1 -g $CLUSTER_MASTER -k $KEY_NAME -f "$bin"/$USER_DATA_FILE -t $INSTANCE_TYPE $KERNEL_ARG | grep INSTANCE | awk '{print $2}'`
echo "Waiting for instance $INSTANCE to start"
while true; do
  printf "."
  # get private dns
  MASTER_HOST=`ec2-describe-instances $INSTANCE | grep running | awk '{print $5}'`
  if [ ! -z $MASTER_HOST ]; then
  	echo "" # just a line return
    echo "Started as $MASTER_HOST"
    break;
  fi
  sleep 1
done

MASTER_EC2_HOST=`ec2-describe-instances $INSTANCE | grep INSTANCE | grep running | grep $MASTER_HOST | awk '{print $4}'`
MASTER_EC2_ZONE=`ec2-describe-instances $INSTANCE | grep INSTANCE | grep running | grep $MASTER_HOST | awk '{print $11}'`

# SG do we need this???
#echo $MASTER_HOST > $MASTER_PRIVATE_IP_PATH
#echo $MASTER_EC2_HOST > $MASTER_IP_PATH
#echo $MASTER_EC2_ZONE > $MASTER_ZONE_PATH

while true; do
  REPLY=`ssh $SSH_OPTS "root@$MASTER_EC2_HOST" 'echo "hello"'`
  if [ ! -z $REPLY ]; then
   break;
  fi
  sleep 5
done

echo "Copying private key to master"
scp $SSH_OPTS $PRIVATE_KEY_PATH "root@$MASTER_EC2_HOST:/root/.ssh/id_rsa" > /dev/null
ssh $SSH_OPTS "root@$MASTER_EC2_HOST" "chmod 600 /root/.ssh/id_rsa"  > /dev/null

MASTER_IP=`dig +short $MASTER_EC2_HOST`
echo "Master is $MASTER_EC2_HOST, ip is $MASTER_IP, zone is $MASTER_EC2_ZONE."


# Substituting master hostname
sed -e "s|%MASTER_HOST%|$MASTER_HOST|" "$bin"/$USER_DATA_FILE > "$bin"/$USER_DATA_FILE.slave

# Start nodes
echo "Adding $CLUSTER node(s) to cluster group $CLUSTER with AMI $AMI_IMAGE"
INSTANCES=`ec2-run-instances $AMI_IMAGE -n "$NO_INSTANCES" -g "$CLUSTER" -k "$KEY_NAME" -f "$bin"/$USER_DATA_FILE.slave -t "$INSTANCE_TYPE" -z "$MASTER_EC2_ZONE" $KERNEL_ARG | grep INSTANCE | awk '{print $2}'`
rm "$bin"/$USER_DATA_FILE.slave

#upgrading masters nodes file
echo "Instances are:"
echo $INSTANCES


## wait until all instances are up

echo "Waiting until all new instances are started."
EXPECTED_NODES=`echo $INSTANCES| wc -w`
while true; do
  printf "."
  STARTED_NODES=`ec2-describe-instances $INSTANCES | grep running | awk '{print $5}' | wc -l`
  if [ $STARTED_NODES == $EXPECTED_NODES ]; then
   break;
  fi
  sleep 1
done
echo "" 

echo "Cluster started."
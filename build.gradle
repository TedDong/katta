/**
 * Copyright 2008 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
import java.text.DateFormat
import java.text.SimpleDateFormat

archivesBaseName = 'katta'
group = 'net.sf.katta'

version = "0.5-SNAPSHOT"
hadoopVersion = "0.18.1"

usePlugin('java')
usePlugin('maven')
testSrcDirNames.add("test/integration")

sourceCompatibility = 1.5
targetCompatibility = 1.5

defaultTasks "help"


createTask('wrapper', type: Wrapper).configure {
  urlRoot = 'http://dist.codehaus.org/gradle/'
  gradleVersion = '0.5'
  jarPath = 'build-libs'
}


dependencies {
  // build dependencies 
  addFlatDirResolver('build-libs', new File(rootDir, 'build-libs'))
  addConfiguration('mavenUpload')
  clientModule(['mavenUpload'], ":wagon-ssh:1.0-beta-2") { 
      dependency(":jsch:0.1.27")
      dependency(":plexus-interactivity-api:1.0-alpha-4")
      dependency(":plexus-container-default:1.0-alpha-8")
      dependency(":plexus-utils:1.0.4")
      dependency(":classworlds:1.1-alpha-2")
      dependency(":wagon-ssh-common:1.0-beta-2")
      dependency(":wagon-provider-api:1.0-beta-2")
  } 

  // project dependencies
  addFlatDirResolver('lib', new File(rootDir, 'lib'))
  
  compile "org.apache.lucene:lucene-core:2.3.2"
  compile "zookeeper:zookeeper:2.2.1"
  compile "commons-cli:commons-cli:2.0-SNAPSHOT"
  compile "log4j:log4j:1.2.13"

  clientModule(['compile'], "org.apache.hadoop:hadoop-core:${hadoopVersion}") {
    dependency("commons-codec:commons-codec:1.3")
    dependency("net.java.dev.jets3:jets3t:0.5.0")
    dependency("xmlenc:xmlenc:0.52")
    dependency("commons-httpclient:commons-httpclient:3.0.1")
    dependency("commons-logging:commons-logging:1.0.4")
    dependency("commons-logging:commons-logging-api:1.0.4")
  }
  
  
  def HAMCREST = ["org.hamcrest:hamcrest-core:1.1", "org.hamcrest:hamcrest-library:1.1"]
  clientModule(['testCompile'], "org.jmock:jmock:2.4.0") {
    dependencies(HAMCREST as String[])
  }
  clientModule(['testCompile'], "org.apache.hadoop:hadoop:${hadoopVersion}-test") {
    dependency("org.mortbay.jetty:jetty:5.1.4") {
      dependency("org.mortbay.jetty:jasper-runtime:x")
      dependency("org.mortbay.jetty:jasper-compiler:x")
      dependency("servlet-api:servlet-api:2.4")
      dependency("jsp-api:jsp-api:2.0")
    }
  }
  testCompile "junit:junit:3.8.1"
  testCompile HAMCREST
  
}


uploadProperties = ['kattaSshUser', 'kattaSshPassword', 'kattaSshHost', 'kattaSshUri']
boolean uploadRepositoryDefined = uploadProperties.every {property -> hasProperty(property) }
if(uploadRepositoryDefined) {
  uploaderName = 'maven-deployer'
    [uploadLibs]*.uploadResolvers*.addMavenDeployer(uploaderName) {
        repository(url: "scp://$kattaSshHost:$kattaSshUri") {
            authentication(userName: "$kattaSshUser", password: "$kattaSshPassword")
        }
        uniqueVersion = true
    }
    [uploadLibs]*.doFirst {task ->
      task.uploadResolvers.get(uploaderName).addProtocolProviderJars(dependencies.mavenUpload.files as List)
    }
}

init.doFirst {
  if (build.taskGraph.hasTask(':uploadLibs') || build.taskGraph.hasTask(':uploadDists')) {
       if (!uploadRepositoryDefined) {
          throw new InvalidUserDataException("Please define '"+uploadProperties+"' in $gradleUserHome/gradle.properties");
       }
  }
}


//collect runtime libs for the distribution
File runtimeLibsDir = new File(buildDir, 'runtimeLibs')
createTask('collectRuntimeLibs', dependsOn:'archive_jar') {
  runtimeLibsDir.mkdirs()
  dependencies.resolve('runtime').each {File file ->
    ant.copy(file: file, todir: runtimeLibsDir)
  }
  ant.copy(file: archive_jar.archivePath, toDir: runtimeLibsDir)
}


test {
  dependsOn 'checkHeader'
  
  boolean integrationTests = System.getProperty("integrationTests") != null;
  boolean integrationTestsOnly = System.getProperty("integrationTestsOnly") != null;
  if (integrationTestsOnly) {
    include '**/integrationTest/**/*Test.class'
  } else {
	include '**/*Test.class'  
    if (!integrationTests) {
      exclude '**/integrationTest/**/*Test.class'
    } 
  }
  exclude '**/Abstract*Test.class'
}


libs() {
  SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss.SSS z");
  simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
  def date=simpleDateFormat.format(new Date());
  
   //get svn info's
    def revision = "unknown"
    def svnUrl = "unknown"

    def proc = """svn info . --xml""".execute()
    proc.waitFor()

    if (proc.exitValue() != 0) {
        println "Warning: Problem to run svn info command. Make sure you have svn installed "
    } else {
        def xml = proc.in.text + ""
        def svnInfo = new XmlParser().parseText(xml)
        revision = svnInfo.entry.'@revision'.text()
        svnUrl = svnInfo.entry.url.text()
    }
  
  manifest.mainAttributes([ 
    'Implementation-Title': 'Katta', 
    'Compile-Time': date,
    'Compiled-By': System.getProperty("user.name"),
    'SVN-Revision': revision+"",
    'SVN-URL': svnUrl +" -r "+revision
    ])
 
  //create a hadoop job jar (for index merging)
  jar(baseName: "katta") {
      extension = "job"
      mergeGroup(runtimeLibsDir) {
    	  include('katta-*.jar')
    	  include('lucene-*.jar')
      }
      publish = false
  }
  katta_jar.dependsOn('archive_jar', 'collectRuntimeLibs')
}

archive_jar.doFirst() {
  archive_jar.manifest.mainAttributes('Implementation-Version': version)
}


//build a distribution
dists {
  zip().doFirst() { Task zipTask ->
    zipTask.configure {
      String zipRoot = "$archivesBaseName-$version"
      zipFileSet(dir: file('bin'), prefix: "$zipRoot/bin" , fileMode: '775')
      zipFileSet(dir: file('conf'), prefix: "$zipRoot/conf")
      zipFileSet(dir: file('extras'), prefix: "$zipRoot/extras")
      zipFileSet(dir: runtimeLibsDir, prefix: "$zipRoot/lib")
      zipFileSet(dir: docsDir, prefix: "$zipRoot/docs")
      zipFileSet(dir: srcRoot, prefix: "$zipRoot/src")
      zipFileSet(dir: projectDir, prefix: "$zipRoot") {
        include('*.txt')
        exclude('todo.txt')
      }
      zipFileSet(dir: buildDir, prefix: "$zipRoot") {
        include('katta-*.job')
      }
    }
  }
    
  tarGz().doFirst() { Task tarTask ->
    tarTask.configure {
      String tarRoot = "$archivesBaseName-$version"
      tarFileSet(dir: file('bin'), prefix: "$tarRoot/bin", fileMode: '775')
      tarFileSet(dir: file('conf'), prefix: "$tarRoot/conf")
      tarFileSet(dir: file('extras'), prefix: "$tarRoot/extras")
      tarFileSet(dir: runtimeLibsDir, prefix: "$tarRoot/lib")
      tarFileSet(dir: docsDir, prefix: "$tarRoot/docs")
      tarFileSet(dir: srcRoot, prefix: "$tarRoot/src")
      tarFileSet(dir: projectDir, prefix: "$tarRoot") {
        include('*.txt')
        exclude('todo.txt')
      }
      tarFileSet(dir: buildDir, prefix: "$tarRoot") {
        include('katta-*.job')
      }
    }
  }
    
}

archive_zip.dependsOn('collectRuntimeLibs', 'javadoc')
task('archive_tar.gz').dependsOn('collectRuntimeLibs', 'javadoc')

def mavenArtifactVersion;

uploadDists.doFirst {
  if(version.endsWith("SNAPSHOT")) {
    def mavenGroup = group.replace(".","/");
    
    //get uploaded lib count
    def outputProperty = "outputProperty"
    ant.sshexec(host: "$kattaSshHost", username: "$kattaSshUser", password: "$kattaSshPassword", command: "ls $kattaSshUri/$mavenGroup/$archivesBaseName/$version/*.jar | wc -l", outputproperty: outputProperty);
    lastBuildNumber = ant.getAntProject().getProperties().get(outputProperty).trim();
    
    //get the latest uploaded lib
    ant.sshexec(host: "$kattaSshHost", username: "$kattaSshUser", password: "$kattaSshPassword", command: "ls $kattaSshUri/$mavenGroup/$archivesBaseName/$version/*-${lastBuildNumber}.jar", outputproperty: outputProperty);
    def jarPath= ant.getAntProject().getProperties().get(outputProperty)
    
    mavenArtifactVersion = jarPath.substring(jarPath.lastIndexOf("katta")+6,jarPath.length()-5)
    uploadDists.uploadResolvers.get('Katta Distribution Repository').setArtifactPatterns(['ssh://' + kattaSshUser + '@' + kattaSshHost + ':' + kattaSshUri + '/[organisation]/[artifact]/[revision]/[artifact]-' + mavenArtifactVersion + '.[ext]'])
  }
}

uploadDists { 
  if(uploadRepositoryDefined){
    org.apache.ivy.plugins.resolver.SshResolver resolver = new org.apache.ivy.plugins.resolver.SshResolver()
    resolver.name = 'Katta Distribution Repository'
    resolver.userPassword = kattaSshPassword
    resolver.m2compatible = true
    resolver.setPublishPermissions("0644");
    uploadDists.uploadResolvers.add(resolver);
  }
}

 
createTask('checkHeader') {
  println "checking missing or wrong license headers..."
  scanRoot = projectDir
  def scanner = ant.fileScanner {
    fileset (dir: scanRoot) {
        include(name: "build.gradle")
        include(name: "**/*.java")
        exclude(name: "**/target/**")
        exclude(name: "**/build/**")
        exclude(name: "**/build-resolver/**")
    }
  }

  int corruptHeaderCount=0;
  def licenseLineLine2 = "Copyright 2008 the original author or authors."
  def licenseLineLine4 = "Licensed under the Apache License, Version 2.0 (the \"License\");"
  println("files with missing/wrong license header:")
  scanner.each { file ->
    file.withReader { reader ->
      def line2 = null
      def line4 = null
      2.times { line2 = reader.readLine() }
      2.times { line4 = reader.readLine()}

      if (line2==null || !line2.endsWith(licenseLineLine2) || !line4.endsWith(licenseLineLine4)) {
    	println(" $file")
    	corruptHeaderCount++;
        retValue = false
      }
      reader.close()
	}
  }
  println ""
  println "$corruptHeaderCount files with corrupt license headers..."
  if(corruptHeaderCount>0) {
    throw new RuntimeException("There are files with missing or corrupt license headers")
  }
}
  
createTask ('help') {
  println " "
  println "available goals:"
  println "  clean \t\tcleans the build folder"
  println "  test \t\t\truns the test suite (can run with -DintegrationTests or -DintegrationTestsOnly)"
  println "  dists \t\tcreates a distribution"
  println "  eclipse \t\tcreates eclipse project files"
  println "  checkHeader \t\tchecks license header of all java files"
  println " "
  println "useful flags :"
  println "  -Dskip.test \t\t\tskip execution of tests"
  println "  -DintegrationTests \t\trun the integration tests additional to the unit tests"
  println "  -DintegrationTestsOnly \trun only the integration tests"
  println " "
  println "upload configuration:"
  println "  to do an upload of the libs and dists, you have to define some upload properties in your gradle property file. e.g. \'$gradleUserHome/gradle.properties\'"
  println "  kattaSshUser=SSH_USER_NAME"
  println "  kattaSshPassword=SSH_PASSWORD"
  println "  kattaSshHost=SSH_HOST"
  println "  kattaSshUri=SSH_URI, e.g. /tmp/m2Repo"
  println " "
  println "examples"
  println "  sh gradlew clean uploadDists \t\t\tcompiles the code, execute all tests, build jars and the distributioin and upload all jars + distribution"
}

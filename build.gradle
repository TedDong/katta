/**
 * Copyright 2008 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
import java.text.DateFormat
import java.text.SimpleDateFormat
import org.gradle.api.tasks.StopExecutionException

archivesBaseName = 'katta'
group = 'net.sf.katta'
maven2Group = 'net/sf/katta'
timestamp = new SimpleDateFormat("yyyyMMdd.hhmmss").format(new Date());
buildNumber = 0

version = "0.2"
mavenArtifactVersion = version

usePlugin('java')

sourceCompatibility = 1.5
targetCompatibility = 1.5

createTask('wrapper', type: Wrapper).configure {
  urlRoot = 'http://dist.codehaus.org/gradle/'
  gradleVersion = '0.4'
  jarPath = 'src/build/resources/lib'
}

uploadProperties = ['kattaSshUser', 'kattaSshPassword', 'kattaSshHost', 'kattaSshUri']
boolean uploadable = true
uploadProperties.each{listItem ->
  if(!hasProperty(listItem)){
    uploadable = false;
  }
}

test {
  dependsOn 'checkHeader'
  include '**/*Test.class'
  exclude '**/Abstract*Test.class'
}


dependencies {
  addFlatDirResolver('lib', new File(rootDir, 'lib'))

  // todo create clientModule for hadoop etc.
  compile ":hadoop-core:0.16.3", ":lucene-core:2.3.2"
  compile ":zookeeper:2.2.0"
  compile ":commons-cli:2.0-SNAPSHOT"
  compile ":commons-codec:1.3"
  compile ":jets3t:0.5.0"
  compile ":xmlenc:0.52"
  compile ":commons-httpclient:3.0.1"
  compile ":zookeeper:2.2.1"
  compile ":commons-logging:1.0.4"
  compile ":commons-logging-api:1.0.4"
  compile ":log4j:1.2.13"

  def HAMCREST = [":hamcrest-core:1.1", ":hamcrest-library:1.1"]

  clientModule(['testCompile'], ":jmock:2.4.0") {
    dependencies(HAMCREST as String[])
  }
  testCompile HAMCREST, ":junit:3.8.1"
}

init.doFirst() { 
    if(version.endsWith("SNAPSHOT") && uploadable) {
        buildDir.mkdirs()
        ant.sshexec(host: "$kattaSshHost", username: "$kattaSshUser", password: "$kattaSshPassword", command: "ls $kattaSshUri/$maven2Group/$archivesBaseName/$version/*.jar | wc -l", output: "$buildDir/version.txt");
        BufferedReader reader = new BufferedReader(new FileReader(new File(buildDir, "version.txt")))
        String line = reader.readLine();
        reader.close();
        line = line.trim();
        try {
          buildNumber = Integer.parseInt(line) + 1;
        } catch (NumberFormatException e) {
          //nothing todo
        }
        mavenArtifactVersion = version.replaceAll("-SNAPSHOT", "") + '.' + timestamp + '-' + buildNumber  
    }
}


//collect runtime libs for the distribution
File runtimeLibsDir = new File(buildDir, 'runtimeLibs')
createTask('collectRuntimeLibs', dependsOn:'archive_jar') {
  runtimeLibsDir.mkdirs()
  dependencies.resolve('runtime').each {File file ->
    ant.copy(file: file, todir: runtimeLibsDir)
  }
  ant.copy(file: archive_jar.archivePath, toDir: runtimeLibsDir)
}



libs() {
  SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss.SSS z");
  simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
  def date=simpleDateFormat.format(new Date());
  
   //get svn info's
    def revision = "unknown"
    def svnUrl = "unknown"

    def proc = """svn info . --xml""".execute()
    proc.waitFor()

    if (proc.exitValue() != 0) {
        println "Warning: Problem to run svn info command. Make sure you have svn installed "
    } else {
        def xml = proc.in.text + ""
        def svnInfo = new XmlParser().parseText(xml)
        revision = svnInfo.entry.'@revision'.text()
        svnUrl = svnInfo.entry.url.text()
    }
  
  manifest.mainAttributes([ 
    'Implementation-Title': 'Katta', 
    'Compile-Time': date,
    'Compiled-By': System.getProperty("user.name"),
    'SVN-Revision': revision+"",
    'SVN-URL': svnUrl +" -r "+revision
    ])
 
  //create a hadoop job jar
  jar(baseName: "archive_job") {
      extension = "job"
      mergeGroup(runtimeLibsDir)
      merge(archive_jar.archivePath)
      publish = false
  }
  archive_job_jar.dependsOn('archive_jar', 'collectRuntimeLibs')
}

archive_jar.doFirst() {
  archive_jar.manifest.mainAttributes('Implementation-Version': mavenArtifactVersion)
}

uploadLibs.doFirst() {
  if (!uploadable) {
    throw new StopExecutionException("Please define a 'kattaDevelopRepositoryUri' in $gradleUserHome/gradle.properties");
  }
  org.apache.ivy.plugins.resolver.SshResolver resolver = new org.apache.ivy.plugins.resolver.SshResolver()
  resolver.name = 'Katta Develop Repository'
  resolver.userPassword = kattaSshPassword
  resolver.setArtifactPatterns(['ssh://' + kattaSshUser + '@' + kattaSshHost + ':' + kattaSshUri + '/[organisation]/[artifact]/[revision]/[artifact]-' + mavenArtifactVersion + '.[ext]'])
  resolver.m2compatible = true
  resolver.setPublishPermissions("0644");
  uploadLibs.uploadResolvers.add(resolver)
}


uploadLibs.doLast() {
  if (!uploadable) {
    throw new StopExecutionException("Please define '"+uploadProperties+"' in $gradleUserHome/gradle.properties");
  }

  //upload maven pom.xml
  File pom = new File(buildDir, "/$archivesBaseName-$mavenArtifactVersion" + ".pom");
  ant.copy(file: 'src/build/resources/pom.xml', toFile: pom);
  ant.scp(file: pom, toDir: "$kattaSshUser@$kattaSshHost:$kattaSshUri/$maven2Group/$archivesBaseName/$version", password: "$kattaSshPassword");

  //upload maven - metadata.xml
  File metadataFile = new File(buildDir, "maven-metadata.xml")
  BufferedReader reader = new BufferedReader(new FileReader("src/build/resources/maven-metadata.xml"))
  BufferedWriter writer = new BufferedWriter(new FileWriter(metadataFile));
  String line = null;

  if (version.endsWith("SNAPSHOT")) {
    while ((line = reader.readLine()) != null) {
      if (line.contains("timestamp")) {
        line = "<timestamp>" + timestamp + "</timestamp>"
      } else if (line.contains("buildNumber")) {
        line = "<buildNumber>" + buildNumber + "</buildNumber>";
      } else if (line.contains("lastUpdated")) {
        line = "<lastUpdated>" + timestamp.replace('.', '') + "</lastUpdated>";
      }
      writer.writeLine(line);
    }
    reader.close();
    writer.close();
    ant.scp(file: metadataFile, toDir: "$kattaSshUser@$kattaSshHost:$kattaSshUri/$maven2Group/$archivesBaseName/$version", password: "$kattaSshPassword");
  }
}


//build a distribution
dists {
  zip().doFirst() { Task zipTask ->
    zipTask.configure {
      String zipRoot = "$archivesBaseName-$mavenArtifactVersion"
      zipFileSet(dir: file('bin'), prefix: "$zipRoot/bin")
      zipFileSet(dir: file('conf'), prefix: "$zipRoot/conf")
      zipFileSet(dir: runtimeLibsDir, prefix: "$zipRoot/libs")
      zipFileSet(dir: new File(buildDir, "docs"), prefix: "$zipRoot/docs")
      zipFileSet(dir: new File(project.projectDir, "src"), prefix: "$zipRoot/src")
      zipFileSet(dir: project.projectDir, prefix: "$zipRoot") {
        include('*.txt')
      }
    }
  }
    
  tarGz().doFirst() { Task tarTask ->
    tarTask.configure {
      String tarRoot = "$archivesBaseName-$mavenArtifactVersion"
      tarFileSet(dir: file('bin'), prefix: "$tarRoot/bin")
      tarFileSet(dir: file('conf'), prefix: "$tarRoot/conf")
      tarFileSet(dir: runtimeLibsDir, prefix: "$tarRoot/libs")
      tarFileSet(dir: new File(buildDir, "docs"), prefix: "$tarRoot/docs")
      tarFileSet(dir: new File(project.projectDir, "src"), prefix: "$tarRoot/src")
      tarFileSet(dir: project.projectDir, prefix: "$tarRoot") {
        include('*.txt')
      }
    }
  }
    
}

archive_zip.dependsOn('collectRuntimeLibs')



uploadDists.doFirst {
  if (!uploadable) {
    throw new StopExecutionException("Please define a '"+uploadProperties+"' in $gradleUserHome/gradle.properties");
  }
  org.apache.ivy.plugins.resolver.SshResolver resolver = new org.apache.ivy.plugins.resolver.SshResolver()
  resolver.name = 'Katta Distribution Repository'
  resolver.userPassword = kattaSshPassword
  resolver.m2compatible = true
  resolver.setArtifactPatterns(['ssh://' + kattaSshUser + '@' + kattaSshHost + ':' + kattaSshUri + '/[organisation]/[artifact]/[revision]/[artifact]-' + mavenArtifactVersion + '.[ext]'])
  resolver.setPublishPermissions("0644");
  uploadDists.uploadResolvers.add(resolver);
}

 
createTask('checkHeader') {
  println "checking missing or wrong license headers..."
  scanRoot = projectDir
  def scanner = ant.fileScanner {
    fileset (dir: scanRoot) {
        include(name: "build.gradle")
        include(name: "**/*.java")
        exclude(name: "**/target/**")
        exclude(name: "**/build/**")
        exclude(name: "**/build-resolver/**")
    }
  }

  int corruptHeaderCount=0;
  def licenseLineLine2 = "Copyright 2008 the original author or authors."
  def licenseLineLine4 = "Licensed under the Apache License, Version 2.0 (the \"License\");"
  println("files with missing/wrong license header:")
  scanner.each { file ->
    file.withReader { reader ->
      def line2 = null
      def line4 = null
      2.times { line2 = reader.readLine() }
      2.times { line4 = reader.readLine()}

      if (line2==null || !line2.endsWith(licenseLineLine2) || !line4.endsWith(licenseLineLine4)) {
    	println(" $file")
    	corruptHeaderCount++;
        retValue = false
      }
      reader.close()
	}
  }
  println ""
  println "$corruptHeaderCount files with corrupt license headers..."
  if(corruptHeaderCount>0) {
    throw new RuntimeException("There are files with missing or corrupt license headers")
  }
}
  

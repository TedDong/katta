/**
 * Copyright 2008 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
import java.text.DateFormat
import java.text.SimpleDateFormat
import org.gradle.api.tasks.StopExecutionException
import org.tigris.subversion.javahl.SVNClientInterface
import org.tmatesoft.svn.core.internal.io.dav.DAVRepositoryFactory
import org.tmatesoft.svn.core.javahl.SVNClientImpl
import org.tigris.subversion.javahl.Info

archivesBaseName = 'katta'
group = 'net.sf.katta'
version = '0.1.0'
snapShotVersion = version
String timestamp = ""
int buildNumber = 1;
String distributionNumber = version;

String maven2Group = group.toString().replaceAll('\\.', '/');
File uploadFolder = buildDir


usePlugin('java')

sourceCompatibility = 1.5
targetCompatibility = 1.5

createTask('wrapper', type: Wrapper).configure {
  urlRoot = 'http://dist.codehaus.org/gradle/'
  gradleVersion = '0.3'
  jarPath = 'src/build/resources/lib'
}


Map requiredProperties = [
  kattaDevelopRepositoryUri: hasProperty('kattaDevelopRepositoryUri'),
  kattaDistributionRepositoryUri: hasProperty('kattaDistributionRepositoryUri'),
  kattaSshUser: hasProperty('kattaSshUser'),
  kattaSshPassword: hasProperty('kattaSshPassword'),
  kattaSshHost: hasProperty('kattaSshHost'),
]

public class JarFilter implements FileFilter {

  public boolean accept(File file) {
    return file.getName().endsWith(".jar");
  }

}

test {
  dependsOn 'checkHeader'
  include '**/*Test.class'
  exclude '**/Abstract*Test.class'
}


dependencies {
  addFlatDirResolver('lib', new File(rootDir, 'lib'))

  // todo create clientModule for hadoop etc.
  compile ":hadoop-core:0.16.3", ":lucene-core:2.3.2"
  compile ":zookeeper:2.2.0"
  compile ":commons-cli:2.0-SNAPSHOT"
  compile ":commons-codec:1.3"
  compile ":jets3t:0.5.0"
  compile ":xmlenc:0.52"
  compile ":commons-httpclient:3.0.1"
  compile ":zookeeper:2.2.0"
  compile ":commons-logging:1.0.4"
  compile ":commons-logging-api:1.0.4"
  compile ":log4j:1.2.13"

  def HAMCREST = [":hamcrest-core:1.1", ":hamcrest-library:1.1"]

  clientModule(['testCompile'], ":jmock:2.4.0") {
    dependencies(HAMCREST as String[])
  }
  testCompile HAMCREST, ":junit:3.8.1"
}

//configure snapShot version
init {
  if (requiredProperties.kattaDevelopRepositoryUri && requiredProperties.kattaSshUser && requiredProperties.kattaSshPassword && requiredProperties.kattaSshHost) {
    buildDir.mkdir();
    ant.sshexec(host: "$kattaSshHost", username: "$kattaSshUser", password: "$kattaSshPassword", command: "ls $kattaDevelopRepositoryUri/$maven2Group/$archivesBaseName/$version/*.jar | wc -l", output: "$buildDir/version.txt");

    BufferedReader reader = new BufferedReader(new FileReader(new File(buildDir, "version.txt")))
    String line = reader.readLine();
    reader.close();
    line = line.trim();
    uploadFolder = new File(kattaDevelopRepositoryUri + "/$maven2Group/$archivesBaseName/$version");
    try {
      buildNumber = Integer.parseInt(line) + 1;
    } catch (NumberFormatException e) {
      //nothing todo
    }
  }
  String pattern = "yyyyMMdd.hhmmss";
  DateFormat dateFormat = new SimpleDateFormat(pattern);
  timestamp = dateFormat.format(new Date());
  snapShotVersion = version.replaceAll("SNAPSHOT", "") + timestamp + "-" + buildNumber;
  distributionNumber = version.replaceAll("-SNAPSHOT", "") + "." + buildNumber;
}

//collect runtime libs for the distribution
File runtimeLibsDir = new File(buildDir, 'runtimeLibs')
createTask('collectRuntimeLibs') {
  runtimeLibsDir.mkdirs()
  dependencies.resolve('runtime').each {File file ->
    ant.copy(file: file, todir: runtimeLibsDir)
  }
  ant.copy(file: archive_jar.archivePath, toDir: runtimeLibsDir)
}

//lib tasks (build the jars)
libs() {
  SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss.SSS z");
  simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
  def date=simpleDateFormat.format(new Date());
  
  //get svn info's
  DAVRepositoryFactory.setup();
  SVNClientInterface svnClient = SVNClientImpl.newInstance();
  Info svnInfo=svnClient.info('.');
  
  manifest.mainAttributes([ 
    'Implementation-Title': 'Katta', 
    'Implementation-Version': version, 
    'Compile-Time': date,
    'Compiled-By': System.getProperty("user.name"),
    'SVN-Revision': svnInfo.getRevision()+"",
    'SVN-URL': svnInfo.getUrl() +" -r "+svnInfo.getRevision()
    ]) 
 
  //create a hadoop job jar
  jar(baseName: "archive_job") {
    extension = "job"
    mergeGroup(runtimeLibsDir)
    merge(archive_jar.archivePath)
    publish = false
  }
  archive_job_jar.dependsOn('archive_jar', 'collectRuntimeLibs')
}


uploadLibs.doFirst {
  if (!requiredProperties.kattaDevelopRepositoryUri || !requiredProperties.kattaSshUser || !requiredProperties.kattaSshPassword || !requiredProperties.kattaSshHost) {
    throw new StopExecutionException("Please define a 'kattaDevelopRepositoryUri' in $gradleUserHome/gradle.properties");
  }
}

// we only support the upload via scp
uploadLibs {
  if (requiredProperties.kattaDevelopRepositoryUri && requiredProperties.kattaSshUser && requiredProperties.kattaSshPassword && requiredProperties.kattaSshHost) {
    org.apache.ivy.plugins.resolver.SshResolver resolver = new org.apache.ivy.plugins.resolver.SshResolver()
    resolver.name = 'Katta Develop Repository'
    resolver.userPassword = kattaSshPassword
    resolver.setArtifactPatterns(['ssh://' + kattaSshUser + '@' + kattaSshHost + ':' + kattaDevelopRepositoryUri + '/[organisation]/[artifact]/[revision]/[artifact]-' + snapShotVersion + '.[ext]'])
    resolver.m2compatible = true
    resolver.setPublishPermissions("0644");
    uploadResolvers.add(resolver)
  }
}

uploadLibs.doLast {
  if (!requiredProperties.kattaDevelopRepositoryUri) {
    throw new StopExecutionException("Please define a 'kattaDevelopRepositoryUri' in $gradleUserHome/gradle.properties");
  }

  //upload maven pom.xml
  File pom = new File(buildDir, "/$archivesBaseName-$snapShotVersion" + ".pom");
  ant.copy(file: 'src/build/resources/pom.xml', toFile: pom);
  ant.scp(file: pom, toDir: "$kattaSshUser@$kattaSshHost:$uploadFolder", password: "$kattaSshPassword");

  //upload maven - metadata.xml
  File metadataFile = new File(buildDir, "maven-metadata.xml")
  BufferedReader reader = new BufferedReader(new FileReader("src/build/resources/maven-metadata.xml"))
  BufferedWriter writer = new BufferedWriter(new FileWriter(metadataFile));
  String line = null;
  while ((line = reader.readLine()) != null) {
    if (line.contains("timestamp")) {
      line = "<timestamp>" + timestamp + "</timestamp>"
    } else if (line.contains("buildNumber")) {
      line = "<buildNumber>" + buildNumber + "</buildNumber>";
    } else if (line.contains("lastUpdated")) {
      line = "<lastUpdated>" + timestamp.replace('.', '') + "</lastUpdated>";
    }
    writer.writeLine(line);
  }
  reader.close();
  writer.close();
  ant.scp(file: metadataFile, toDir: "$kattaSshUser@$kattaSshHost:$uploadFolder", password: "$kattaSshPassword");
}

//build a distribution
dists {
  String zipRoot = "$archivesBaseName-$distributionNumber"
  zip() {
    zipFileSet(dir: file('bin'), prefix: "$zipRoot/bin", fileMode: '775')
    zipFileSet(dir: file('conf'), prefix: "$zipRoot/conf")
    zipFileSet(dir: runtimeLibsDir, prefix: "$zipRoot/lib")
  }
}

//build a release
createTask('release', dependsOn:['clean', 'dists']) {
  String zipRoot = "$archivesBaseName-$version"
  ant.zip(destfile: new File(buildDir, zipRoot+".zip")) {
    zipFileSet(dir: file('bin'), prefix: "$zipRoot/bin", fileMode: '775')
    zipFileSet(dir: file('conf'), prefix: "$zipRoot/conf")
    zipFileSet(dir: runtimeLibsDir, prefix: "$zipRoot/lib")
    zipFileSet(file: file('README.txt'), prefix: "$zipRoot")
    zipFileSet(file: file('LICENSE.txt'), prefix: "$zipRoot")
    zipFileSet(file: file('CHANGES.txt'), prefix: "$zipRoot")
  }
  
  String tarRoot = "$archivesBaseName-$version"
  ant.tar(destfile: new File(buildDir, tarRoot+".tar.gz")) {
    tarFileSet(dir: file('bin'), prefix: "$tarRoot/bin", fileMode: '775')
    tarFileSet(dir: file('conf'), prefix: "$tarRoot/conf")
    tarFileSet(dir: runtimeLibsDir, prefix: "$tarRoot/lib")
    tarFileSet(file: file('README.txt'), prefix: "$tarRoot")
    tarFileSet(file: file('LICENSE.txt'), prefix: "$tarRoot")
    tarFileSet(file: file('CHANGES.txt'), prefix: "$tarRoot")
  }
}

archive_zip.doFirst {
  distsDir.mkdirs()
}

archive_zip.doLast {
  ant {
    exec(executable: 'unzip') {
      arg(value: '-q')
      arg(value: '-d')
      arg(value: distsDir)
      arg(value: archive_zip.archivePath)
    }
  }
}

uploadDists.doFirst {
  if (!requiredProperties.kattaDistributionRepositoryUri || !requiredProperties.kattaSshUser || !requiredProperties.kattaSshPassword || !requiredProperties.kattaSshHost) {
    throw new StopExecutionException("Please define a 'kattaDistributionRepositoryUri' in $gradleUserHome/gradle.properties");
  }
}

// we only support the upload via scp
uploadDists {
  if (requiredProperties.kattaDistributionRepositoryUri && requiredProperties.kattaSshUser && requiredProperties.kattaSshPassword && requiredProperties.kattaSshHost) {
    org.apache.ivy.plugins.resolver.SshResolver resolver = new org.apache.ivy.plugins.resolver.SshResolver()
    resolver.name = 'Katta Distribution Repository'
    resolver.userPassword = kattaSshPassword

    resolver.setArtifactPatterns(['ssh://' + kattaSshUser + '@' + kattaSshHost + ':' + kattaDistributionRepositoryUri + '/[artifact]-' + distributionNumber + '.[ext]'])
    resolver.setPublishPermissions("0644");
    uploadResolvers.add(resolver);
  }
  
createTask('checkHeader') {
  println "checking missing or wrong license headers..."
  scanRoot = projectDir
  def scanner = ant.fileScanner {
    fileset (dir: scanRoot) {
        include(name: "build.gradle")
        include(name: "**/*.java")
        exclude(name: "**/target/**")
        exclude(name: "**/build/**")
        exclude(name: "**/build-resolver/**")
    }
  }

  int corruptHeaderCount=0;
  def licenseLineLine2 = "Copyright 2008 the original author or authors."
  def licenseLineLine4 = "Licensed under the Apache License, Version 2.0 (the \"License\");"
  println("files with missing/wrong license header:")
  scanner.each { file ->
    file.withReader { reader ->
      def line2 = null
      def line4 = null
      2.times { line2 = reader.readLine() }
      2.times { line4 = reader.readLine()}

      if (line2==null || !line2.endsWith(licenseLineLine2) || !line4.endsWith(licenseLineLine4)) {
    	println(" $file")
    	corruptHeaderCount++;
        retValue = false
      }
      reader.close()
	}
  }
  println ""
  println "$corruptHeaderCount files with corrupt license headers..."
  if(corruptHeaderCount>0) {
    throw new RuntimeException("There are files with missing or corrupt license headers")
  }
}
  
}

<project name="katta-core" default="test" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="root.dir" value="${basedir}" />
	<!-- all standard ant tasks are in the common build file-->
	<import file="${root.dir}/src/build/ant/common-build.xml" />

	

	<!-- ================================================================== -->
	<!-- Integration Tests                                                  -->
	<!-- ================================================================== -->

	<target name="compile-integration-test" depends="compile, compile-test" description="--> compiles integration test classes">
		<echo>*** Building Integration Tests Sources ***</echo>
		<mkdir dir="${build.dir.it-classes}" />
		<ivy:cachepath pathid="test.path.id" conf="test" />
		<path id="test.path">
			<path refid="test.path.id" />
			<pathelement location="${build.dir.main-classes}" />
			<pathelement location="${build.dir.test-classes}" />
		</path>

		<javac encoding="${build.encoding}" srcdir="${it.src.dir}" includes="**/*.java" destdir="${build.dir.it-classes}" debug="${javac.debug}" optimize="${javac.optimize}" target="${javac.version}" source="${javac.version}" deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="test.path" />
		</javac>
	</target>

	<target name="it" depends="jar, compile-integration-test" description="--> run integration tests">
		<delete dir="${build.dir.it-reports}" />
		<mkdir dir="${build.dir.it-reports}" />
		<delete file="log.log"/>

		<delete dir="${build.dir.test-data}" />
		<mkdir dir="${build.dir.test-data}" />

		<ivy:cachepath pathid="test.path.id" conf="test" />

		<junit showoutput="no" printsummary="yes" haltonfailure="no" fork="yes" forkmode="perBatch" maxmemory="256m" dir="${basedir}" errorProperty="tests.failed" failureProperty="tests.failed">
			<classpath>
				<pathelement location="${build.dir.main-classes}" />
				<pathelement location="${build.dir.it-classes}" />
				<pathelement location="${build.dir.test-classes}" />
				<pathelement location="${test.res.dir}" />
				<path refid="test.path.id" />
				<fileset file="${build.dir}/${ant.project.name}.jar" />
			</classpath>
			<formatter type="plain" />
			<batchtest fork="yes" todir="${build.dir.it-reports}" unless="testcase">
				<fileset dir="${it.src.dir}">
					<include name="**/*Test*.java" unless="testcase" />
					<exclude name="**/Abstract*.java" unless="testcase" />
				</fileset>
			</batchtest>
			<batchtest fork="yes" todir="${build.dir.it-reports}" if="testcase">
				<fileset dir="${it.src.dir}" includes="**/${testcase}.java" />
			</batchtest>
		</junit>
		<fail if="tests.failed">Tests failed!</fail>
	</target>

	
    <target name="webapp" description="--> builds the Katta web gui, requires grails be installed.">
    	<property environment="env"/>
    	<fail message="Grails need be installed and GRAILS_HOME need to be set.">
	     <condition >
	       <not>
	         <isset property="env.GRAILS_HOME"/>
	       </not>
	     </condition>
	   </fail>
		<echo>Found GRAILS_HOME.</echo>
    	<exec executable="${env.GRAILS_HOME}/bin/grails"   dir="${basedir}/extras/katta.gui">
    		<arg line="war"/>
    	</exec>
        
    </target>
	
	
	<!-- ================================================================== -->
	<!-- Generate a distribution                                            -->
	<!-- ================================================================== -->
	<target name="dist" depends="distCore, distUI" description="--> builds all Katta distributions">
	</target>

	<target name="distCore" depends="jar, doc, checkstyle" description="--> builds the Katta Core distribution">
		<echo>====== Make sure you run 'ant coverage dist' for real distributions ====== </echo>
		<defaultexcludes add="**/.git/**,**/.gitignore"/>
		<delete dir="${build.dir.dist}" />
		<!-- creating a fileset for pulling all libs from ivycache cuz disk space is cheap -->
		<ivy:cachefileset conf="compile" setid="libs" />

		<!-- create target directory -->
		<mkdir dir="${build.dir.dist}" />
		<mkdir dir="${build.dir.dist}/bin" />
		<mkdir dir="${build.dir.dist}/conf" />
		<mkdir dir="${build.dir.dist}/docs" />
		<mkdir dir="${build.dir.dist}/docs/javadoc" />
		<mkdir dir="${build.dir.dist}/docs/reports" />
		<mkdir dir="${build.dir.dist}/lib" />
		<mkdir dir="${build.dir.dist}/src" />
		<mkdir dir="${build.dir.dist}/extras" />

		<!-- copy launch script to target -->
		<copy todir="${build.dir.dist}/bin">
			<fileset dir="${basedir}/bin"/>
		</copy>
		<!-- copy  conf to target dir  -->
		<copy todir="${build.dir.dist}/conf">
			<fileset dir="${basedir}/conf" />
		</copy>
		<!-- copy  javadoc to target dir  -->
		<copy todir="${build.dir.dist}/docs/javadoc">
			<fileset dir="${build.javadoc}" />
		</copy>
		<!-- copy reports to target dir  -->
		<copy todir="${build.dir.dist}/docs/reports" failonerror="no">
			<fileset dir="${coverage.html.dir}" />
		</copy>
		<!-- copy ivy cache to lib -->
		<copy todir="${build.dir.dist}/lib" flatten="true">
			<fileset refid="libs" />
		</copy>
		<!-- copy src -->
		<copy todir="${build.dir.dist}/src">
			<fileset dir="${basedir}/src" />
		</copy>
		<!-- copy project jar to dist dir -->
		<copy todir="${build.dir.dist}">
			<fileset file="${build.dir}/${jar.name}" />
		</copy>
		<!-- copy extras-->
		<copy todir="${build.dir.dist}/extras">
			<fileset dir="${basedir}/extras">
				<include name="**/ec2/**"/>
				<include name="**/indexing/src/**"/>
			</fileset>
		</copy>
		
		<!-- copy project jar to dist dir -->
		<copy todir="${build.dir.dist}">
			<fileset file="${basedir}/CHANGES.txt" />
			<fileset file="${basedir}/LICENSE.txt" />
			<fileset file="${basedir}/README.txt" />
		</copy>
		<!-- clean up all .git folders -->
	
		<chmod perm="u+x">
		  <fileset dir="${build.dir.dist}/bin">
		  </fileset>
		</chmod>

		<tar longfile="gnu" compression="gzip" destfile="${build.release.file}" >
			<tarfileset dir="${build.dir.dist}" prefix="${name}-${version}" filemode="755" >
		         <include name="bin/**"/>
				 <include name="extras/ec2/bin/**"/>
				 <exclude name="bin/katta.ec2.properties"/>
				 <exclude name="extras/ec2/bin/katta-ec2-env.sh"/>
		    </tarfileset>
		    <tarfileset dir="${build.dir.dist}" prefix="${name}-${version}">
		         <exclude name="bin/**"/>
		     	 <exclude name="extras/ec2/bin/**"/>
		    </tarfileset>
		</tar>
	</target>

	<target name="distUI" depends="jar, webapp" description="--> builds the Katta UI distribution">
		<defaultexcludes add="**/.git/**,**/.gitignore"/>
		<delete dir="${build.dir.dist.ui}" />
		<!-- creating a fileset for pulling all libs from ivycache cuz disk space is cheap -->
		<ivy:cachefileset conf="compile" setid="libs" />

		<!-- create target directory -->
		<mkdir dir="${build.dir.dist.ui}" />
		<mkdir dir="${build.dir.dist.ui}/bin" />
		<mkdir dir="${build.dir.dist.ui}/conf" />
		<mkdir dir="${build.dir.dist.ui}/lib" />

		<!-- copy launch script to target -->
		<copy todir="${build.dir.dist.ui}/bin">
			<fileset dir="${basedir}/bin">
				<include name="katta"/>
				<include name="katta-config.sh"/>
			</fileset>
		</copy>
		<!-- copy  conf to target dir  -->
		<copy todir="${build.dir.dist.ui}/conf">
			<fileset dir="${basedir}/conf">
				<include name="katta-env.sh"/>
				<include name="katta.zk.properties"/>
				<include name="log4j.properties"/>
			</fileset>
		</copy>
		<!-- copy ivy cache to lib -->
		<copy todir="${build.dir.dist.ui}/lib" flatten="true">
			<fileset refid="libs" />
		</copy>
		<!-- copy project jar to dist dir -->
		<copy todir="${build.dir.dist.ui}">
			<fileset file="${build.dir}/${jar.name}" />
		</copy>
		<!-- copy webapp-->
		<copy todir="${build.dir.dist.ui}">
			<fileset file="${basedir}/extras/katta.gui/katta.gui*.war" />
		</copy>
		<!-- copy project files to dist dir -->
		<copy todir="${build.dir.dist.ui}">
			<fileset file="${basedir}/CHANGES.txt" />
			<fileset file="${basedir}/LICENSE.txt" />
			<fileset file="${basedir}/README.txt" />
		</copy>
		<!-- clean up all .git folders -->
	
		<chmod perm="u+x">
		  <fileset dir="${build.dir.dist.ui}/bin">
		  </fileset>
		</chmod>

		<tar longfile="gnu" compression="gzip" destfile="${build.release.file.ui}" >
			<tarfileset dir="${build.dir.dist.ui}" prefix="katta-ui-${version}" filemode="755" >
		         <include name="bin/**"/>
				 <include name="extras/ec2/bin/**"/>
				 <exclude name="bin/katta.ec2.properties"/>
				 <exclude name="extras/ec2/bin/katta-ec2-env.sh"/>
		    </tarfileset>
		    <tarfileset dir="${build.dir.dist.ui}" prefix="katta-ui-${version}">
		         <exclude name="bin/**"/>
		     	 <exclude name="extras/ec2/bin/**"/>
		    </tarfileset>
		</tar>
	</target>

	<!-- ================================================================== -->
	<!-- Generating eclipse file                                            -->
	<!-- ================================================================== -->

	<target name="eclipse" depends="clean-eclipse, install-ivy" description="--> generates the eclipse project files">
		<ivy:resolve useorigin="true" conf="eclipse, test"/>
		<ivy:cachepath pathid="eclipse.path.id" conf="eclipse" />
		<ivy:cachepath pathid="test.path.id" conf="test" />
		<taskdef name="eclipse" classname="prantl.ant.eclipse.EclipseTask" classpathref="eclipse.path.id" />
		<mkdir dir="${build.dir.main-classes}" />
		<mkdir dir="${build.dir.test-classes}" />
		<eclipse updatealways="true">
			<settings>
				<jdtcore compilercompliance="6.0" />
				<resources encoding="UTF-8" />
			</settings>
			<project name="katta" />
			<classpath>
				<container path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6" />

			    <source path="${basedir}/src/main/java" output="${build.dir.main-classes}" />
				<source path="${basedir}/src/test/java" output="${build.dir.test-classes}" />
				<source path="${basedir}/src/test/resources" output="${build.dir.test-classes}" />
				<source path="${basedir}/src/test/integration" output="${build.dir.test-classes}" />


				<!-- extras -->
				<source path="${basedir}/extras/indexing/src/main/java" output="${build.dir}/extras/indexing/classes-main" />
				<source path="${basedir}/extras/indexing/src/test/java" output="${build.dir}/extras/indexing/classes-test" />

				<output path="${build.dir.main-classes}" />
				<library pathref="test.path.id" />
			</classpath>
		</eclipse>
		<replace file="${basedir.ivy.instance}/.settings/org.eclipse.jdt.core.prefs" token="org.eclipse.jdt.core.compiler.compliance=6.0" value="org.eclipse.jdt.core.compiler.compliance=1.6" />
		<concat destfile="${basedir.ivy.instance}/.settings/org.eclipse.jdt.core.prefs" append="true">
			 <filelist dir="${root.dir}/src/build/eclipse" files="formatter"/>
		</concat>
	</target>

	<target name="clean-eclipse" depends="install-ivy" description="--> cleans the eclipse project files">
		<delete file=".classpath" />
		<delete file=".eclipse" />
		<delete file=".project" />
		<delete dir=".settings" />
	</target>

	<target name="compile" description="--> compile main classes">
		<antcall target="compile-katta" />
	</target>

	<!-- ================================================================== -->
	<!-- Multi project build                                                -->
	<!-- ================================================================== -->

	<macrodef name="iterate">
		<attribute name="target" />
		<sequential>
			<subant target="@{target}">
				<property name="root.dir" value="${basedir}" />
				<fileset dir="extras" includes="*/build.xml" />
			</subant>
		</sequential>
	</macrodef>

	<target name="clean-all">
		<antcall target="clean" />
		<iterate target="clean" />
	</target>

	<target name="test-all">
		<!--<antcall target="test" />-->
		<iterate target="test" />
	</target>

</project>

<project name="katta-common-build" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="${root.dir}/src/build/ant/build.properties" />

	<target name="hello">
		<echo>hello world</echo>
	</target>

	<!-- ================================================================== -->
	<!-- General cleaning sources                                           -->
	<!-- ================================================================== -->

	<target name="clean" description="--> clean the project">
		<echo>cleaning ${ant.project.name}</echo>
		<delete dir="${build.dir}" />
	</target>


	<!-- ================================================================== -->
	<!-- Ivy                                                                -->
	<!-- ================================================================== -->

	<target name="download-ivy" unless="ivyIsAvailable" description="--> downloads ivy from a maven repo">
		<mkdir dir="${ivy.jar.dir}" />
		<echo message="installing ivy..." />
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
		<get src="http://repo1.maven.org/maven2/com/jcraft/jsch/${jcraft.install.version}/jsch-${jcraft.install.version}.jar" dest="${jcraft.jar.file}" usetimestamp="true" />
	</target>

	<target name="check-ivy-available">
		<available file="${ivy.jar.file}" property="ivyIsAvailable" />
		<antcall target="download-ivy" />
	</target>

	<target name="install-ivy" depends="check-ivy-available" description="--> install ivy">
		<echo>Ivy path </echo>
		<property environment="env" />
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
		<ivy:settings file="${root.dir}/ivy/ivysettings.xml" />
		<ivy:resolve useOrigin="true" />
	</target>

	<target name="clean-ivy" description="--> clean the ivy installation">
		<delete dir="${ivy.jar.dir}" />
	</target>

	<target name="clean-cache" depends="install-ivy" description="--> clean the ivy cache">
		<ivy:cleancache />
	</target>

	<!-- ================================================================== -->
	<!-- Build sources                                                      -->
	<!-- ================================================================== -->

	<target name="compile" depends="resolve" description="--> compile main classes">
		<mkdir dir="${build.dir.main-classes}" />
		<ivy:cachepath pathid="build.path.id" conf="compile" />
		<javac encoding="${build.encoding}" srcdir="${main.src.dir}" includes="**/*.java" destdir="${build.dir.main-classes}" debug="${javac.debug}" optimize="${javac.optimize}" target="${javac.version}" source="${javac.version}" deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="build.path.id" />
		</javac>
	</target>

	<!-- ================================================================== -->
	<!-- Tests                                                              -->
	<!-- ================================================================== -->

	<target name="compile-test" depends="compile" description="--> compile test classes">
		<echo>*** Building Tests Sources ***</echo>
		<mkdir dir="${build.dir.test-classes}" />
		<ivy:cachepath pathid="test.path.id" conf="test" />
		<path id="test.path">
			<path refid="test.path.id" />
			<pathelement location="${build.dir.main-classes}" />
		</path>

		<javac encoding="${build.encoding}" srcdir="${test.src.dir}" includes="**/*.java" destdir="${build.dir.test-classes}" debug="${javac.debug}" optimize="${javac.optimize}" target="${javac.version}" source="${javac.version}" deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="test.path" />
		</javac>
	</target>

	<target name="test" depends="compile-test, checkstyle" description="--> run tests">
		<delete dir="${build.dir.test-reports}" />
		<mkdir dir="${build.dir.test-reports}" />
		<delete dir="${build.dir.test-data}" />
		<mkdir dir="${build.dir.test-data}" />

		<ivy:cachepath pathid="test.path.id" conf="test" />
		<ivy:cachepath pathid="instrument.path.id" conf="instrument" />
		<junit showoutput="false" printsummary="yes" haltonfailure="no" fork="yes" maxmemory="256m" dir="${basedir}" errorProperty="tests.failed" failureProperty="tests.failed">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${reports.dir}/katta_coverage.ser" />
			<classpath>
				<pathelement location="${instrumented.dir}" />
				<pathelement location="${build.dir.main-classes}" />
				<pathelement location="${build.dir.test-classes}" />
				<pathelement location="${test.res.dir}" />
				<path refid="test.path.id" />
				<path refid="instrument.path.id" />
			</classpath>
			<formatter type="plain" />
			<batchtest fork="yes" todir="${build.dir.test-reports}" unless="testcase">
				<fileset dir="${test.src.dir}">
					<include name="**/*Test.java" unless="testcase" />
					<exclude name="**/Abstract*.java" unless="testcase" />
					<exclude name="**/ExtendedTestCase.java" unless="testcase" />
					<include name="${testcase}" if="testcase" />
				</fileset>
			</batchtest>
			<batchtest fork="yes" todir="${build.dir.test-reports}" if="testcase">
				<fileset dir="${test.src.dir}" includes="**/${testcase}.java" />
			</batchtest>
		</junit>
		<fail if="tests.failed">Tests failed!</fail>
	</target>

	
	<target name="checkstyle" depends="resolve">
		<ivy:cachepath pathid="checkstyle.path.id" conf="checkstyle" />
		<taskdef resource="checkstyletask.properties" classpathref="checkstyle.path.id" />

		<checkstyle config="src/build/checkstyle/checkstyle.xml">
			<fileset dir="${main.src.dir}" includes="**/*.java" />
			<fileset dir="${test.src.dir}" includes="**/*.java" />
			<formatter type="plain" />
			<formatter type="xml" toFile="${build.dir}/checkstyle_errors.xml" />
		</checkstyle>

	</target>

		
	<!-- ================================================================== -->
	<!-- Cobertura Section                                                  -->
	<!-- ================================================================== -->

	<target name="instrument" depends="compile">
		<ivy:cachepath pathid="instrument.path.id" conf="instrument" />
		<taskdef classpathref="instrument.path.id" resource="tasks.properties" />
		<delete file="${reports.dir}/katta_coverage.ser" />
		<delete dir="${instrumented.dir}" />
		<cobertura-instrument datafile="${reports.dir}/katta_coverage.ser" todir="${instrumented.dir}">
			<!--
						The following line causes instrument to ignore any
						source line containing a reference to log4j, for the
						purposes of coverage reporting.
					-->
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${build.dir.main-classes}">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="coverage-report">
		<cobertura-report datafile="${reports.dir}/katta_coverage.ser" srcdir="${main.src.dir}" destdir="${coverage.html.dir}" />
	</target>

	<target name="coverage" depends="compile,instrument,test,coverage-report" description="--> create coverage reports" />

	<!-- ================================================================== -->
	<!-- Build jar of sources                                               -->
	<!-- ================================================================== -->


	<target name="jar" depends="compile">
		<ivy:cachepath pathid="svnant.path.id" conf="ant" />
		<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.path.id" />
		<svn>
			<wcVersion path="." />
		</svn>
		<tstamp>
			<format property="timestamp" pattern="MMM dd yyyy, HH:mm:ss" />
		</tstamp>

		<jar jarfile="${build.dir}/${jar.name}" basedir="${build.dir.main-classes}">
			<manifest>
				<section name="net/sf/katta">
					<attribute name="Implementation-Vendor" value="101tec inc" />
					<attribute name="Implementation-Title" value="Katta" />
					<attribute name="Implementation-Version" value="${version}" />
					<attribute name="Compile-Time" value="${timestamp}" />
					<attribute name="Compiled-By" value="${user.name}" />
					<attribute name="SVN-URL" value="${repository.url}" />
					<attribute name="SVN-Revision" value="${revision.max-with-flags}" />
				</section>
			</manifest>
		</jar>
	</target>

	<!-- ================================================================== -->
	<!-- Build sources                                                      -->
	<!-- ================================================================== -->

	<target name="job" depends="compile" description="--> creates a hadop job jar">
		<property name="job.dir" value="${build.dir}/${ant.project.name}-${version}" />
		<mkdir dir="${job.dir}" />
		<mkdir dir="${job.dir}/lib" />
		<!-- copy ivy cache to lib -->
		<ivy:cachefileset conf="job" setid="libs" />
		<copy todir="${job.dir}/lib">
			<fileset refid="libs" />
		</copy>
		<!-- copy  conf to target dir  -->
		<copy todir="${job.dir}">
			<fileset dir="${basedir}/conf" />
		</copy>
		<!-- copy  classes  -->
		<copy todir="${job.dir}">
			<fileset dir="${build.dir.main-classes}" />
		</copy>

		<jar jarfile="${build.dir}/${job.name}">
			<zipfileset dir="${build.dir}/${ant.project.name}-${version}" />
			<manifest>
				<attribute name="Main-Class" value="${job.main.class}" />
			</manifest>
		</jar>
	</target>


	<!-- ================================================================== -->
	<!-- Java Doc                                                           -->
	<!-- ================================================================== -->


	<target name="doc" depends="compile" description="--> create javadoc">
		<mkdir dir="${build.javadoc}" />
		<ivy:cachepath pathid="build.path.id" conf="compile" />
		<javadoc packagenames="sf.net.katta" destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="${name} ${version} API" doctitle="${name} ${version} API" bottom="Copyright &amp;copy; ${year} 101tec Inc.">
			<packageset dir="${main.src.dir}" />
			<link href="${javadoc.link.java}" />
			<classpath>
				<path refid="build.path.id" />
			</classpath>
			<group title="katta" packages="sf.net.katta*" />
		</javadoc>
	</target>
</project>
